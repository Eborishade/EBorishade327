# solutions_to_assgn/ch18/Makefile
#----------------------------------------------------------------------
#  Generated by the genmk.sh utility; one of the "useful snips" within
#  this collection: https://github.com/kaiwan/usefulsnips
#
#  ASSUMPTIONS ::
#   1. the convenience files [../]../common.h and [../]../common.c
#      are present
#   2. the clang/LLVM compiler is installed
#   3. the indent(1L) utility is installed
#
#   WARNING! Do NOT start a source filename with 'core' !
#       (will get Erased when 'make clean' is performed).
#
#----------------------------------------------------------------------
## Pl check and keep or remove <foo>_dbg_[asan|ub|msan] targets
## as desired.
ALL :=  mt_copy mt_copy_dbg #mt_copy_dbg_asan mt_copy_dbg_ub mt_copy_dbg_msan

CC=${CROSS_COMPILE}gcc
CL=${CROSS_COMPILE}clang

CFLAGS=-O2 -Wall -UDEBUG -pthread
CFLAGS_DBG=-g -ggdb -gdwarf-4 -O0 -Wall -Wextra -DDEBUG -pthread
CFLAGS_DBG_ASAN=${CFLAGS_DBG} -fsanitize=address
CFLAGS_DBG_MSAN=${CFLAGS_DBG} -fsanitize=memory
CFLAGS_DBG_UB=${CFLAGS_DBG} -fsanitize=undefined

LINKIN := -lpthread
 # user will need to explicitly set libraries to link in as required;
 # f.e. -lrt -pthread

all: ${ALL}
CB_FILES := *.[ch]

common.o: ../../common.c ../../common.h
	${CC} ${CFLAGS} -c ../../common.c -o common.o
common_dbg.o: ../../common.c ../../common.h
	${CC} ${CFLAGS_DBG} -c ../../common.c -o common_dbg.o

 #--- Sanitizers (use clang): common_dbg_*
common_dbg_asan.o: ../../common.c ../../common.h
	${CL} ${CFLAGS_DBG_ASAN} -c ../../common.c -o common_dbg_asan.o
common_dbg_ub.o: ../../common.c ../../common.h
	${CL} ${CFLAGS_DBG_UB} -c ../../common.c -o common_dbg_ub.o
common_dbg_msan.o: ../../common.c ../../common.h
	${CL} ${CFLAGS_DBG_MSAN} -c ../../common.c -o common_dbg_msan.o

#--- Target :: mt_copy
mt_copy.o: mt_copy.c
	${CC} ${CFLAGS} -c mt_copy.c -o mt_copy.o
mt_copy: common.o mt_copy.o
	${CC} -o mt_copy mt_copy.o common.o ${LINKIN}

mt_copy_dbg.o: mt_copy.c
	${CC} ${CFLAGS_DBG} -c mt_copy.c -o mt_copy_dbg.o
mt_copy_dbg: mt_copy_dbg.o common_dbg.o
	${CC} -o mt_copy_dbg mt_copy_dbg.o common_dbg.o ${LINKIN}

 #--- Sanitizers for mt_copy :: (use clang): <foo>_dbg_[asan|ub|msan]
mt_copy_dbg_asan.o: mt_copy.c
	${CL} ${CFLAGS_DBG_ASAN} -c mt_copy.c -o mt_copy_dbg_asan.o
mt_copy_dbg_asan: mt_copy_dbg_asan.o common_dbg_asan.o
	${CL} ${CFLAGS_DBG_ASAN} -o mt_copy_dbg_asan mt_copy_dbg_asan.o common_dbg_asan.o ${LINKIN}

mt_copy_dbg_ub.o: mt_copy.c
	${CL} ${CFLAGS_DBG_UB} -c mt_copy.c -o mt_copy_dbg_ub.o
mt_copy_dbg_ub: mt_copy_dbg_ub.o common_dbg_ub.o
	${CL} ${CFLAGS_DBG_UB} -o mt_copy_dbg_ub mt_copy_dbg_ub.o common_dbg_ub.o ${LINKIN}

mt_copy_dbg_msan.o: mt_copy.c
	${CL} ${CFLAGS_DBG_MSAN} -c mt_copy.c -o mt_copy_dbg_msan.o
mt_copy_dbg_msan: mt_copy_dbg_msan.o common_dbg_msan.o
	${CL} ${CFLAGS_DBG_MSAN} -o mt_copy_dbg_msan mt_copy_dbg_msan.o common_dbg_msan.o ${LINKIN}


# indent- "beautifies" C code into the "Linux kernel style".
# (cb = C Beautifier :) )
# Note! original source file(s) is overwritten, so we back it up.
cb: ${CB_FILES}
	mkdir bkp 2> /dev/null; cp -f ${CB_FILES} bkp/
	indent -linux ${CB_FILES}

clean:
	rm -vf ${ALL} core* vgcore* *.o *~
