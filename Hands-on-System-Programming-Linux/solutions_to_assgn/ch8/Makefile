# solutions_to_assgn/ch8/Makefile
#----------------------------------------------------------------------
#  Generated by the genmk.sh utility; one of the "useful snips" within
#  this collection: https://github.com/kaiwan/usefulsnips
#
#  ASSUMPTIONS ::
#   1. the convenience files [../]../common.h and [../]../common.c
#      are present
#   2. the clang/LLVM compiler is installed
#   3. the indent(1L) utility is installed
#
#   WARNING! Do NOT start a source filename with 'core' !
#       (will get Erased when 'make clean' is performed).
#----------------------------------------------------------------------
## Pl check and keep or remove <foo>_dbg_[asan|ub|msan] targets
## as desired.
ALL :=  assgn1 assgn1_dbg #assgn1_dbg_asan assgn1_dbg_ub assgn1_dbg_msan

CC=${CROSS_COMPILE}gcc
CL=${CROSS_COMPILE}clang

CFLAGS=-O2 -Wall -UDEBUG
CFLAGS_DBG=-g -ggdb -gdwarf-4 -O0 -Wall -Wextra -DDEBUG
CFLAGS_DBG_ASAN=${CFLAGS_DBG} -fsanitize=address
CFLAGS_DBG_MSAN=${CFLAGS_DBG} -fsanitize=memory
CFLAGS_DBG_UB=${CFLAGS_DBG} -fsanitize=undefined

LINKIN :=
 # user will need to explicitly set libraries to link in as required;
 # f.e. -lrt -pthread

all: ${ALL}
CB_FILES := *.[ch]

common.o: ../../common.c ../../common.h
	${CC} ${CFLAGS} -c ../../common.c -o common.o
common_dbg.o: ../../common.c ../../common.h
	${CC} ${CFLAGS_DBG} -c ../../common.c -o common_dbg.o

 #--- Sanitizers (use clang): common_dbg_*
common_dbg_asan.o: ../../common.c ../../common.h
	${CL} ${CFLAGS_DBG_ASAN} -c ../../common.c -o common_dbg_asan.o
common_dbg_ub.o: ../../common.c ../../common.h
	${CL} ${CFLAGS_DBG_UB} -c ../../common.c -o common_dbg_ub.o
common_dbg_msan.o: ../../common.c ../../common.h
	${CL} ${CFLAGS_DBG_MSAN} -c ../../common.c -o common_dbg_msan.o

#--- Target :: assgn1
assgn1.o: assgn1.c
	${CC} ${CFLAGS} -c assgn1.c -o assgn1.o
assgn1: common.o assgn1.o
	${CC} -o assgn1 assgn1.o common.o ${LINKIN}
	$(info Adding CAP_CHOWN to the binary executable file 'assgn1')
	sudo setcap cap_chown+ep ./assgn1

assgn1_dbg.o: assgn1.c
	${CC} ${CFLAGS_DBG} -c assgn1.c -o assgn1_dbg.o
assgn1_dbg: assgn1_dbg.o common_dbg.o
	${CC} -o assgn1_dbg assgn1_dbg.o common_dbg.o ${LINKIN}
	$(info Adding CAP_CHOWN to the binary executable file 'assgn1_dbg')
	sudo setcap cap_chown+ep ./assgn1_dbg

## We've not added the CAP_CHOWN bit for the 'sanitizer' cases below...
 #--- Sanitizers for assgn1 :: (use clang): <foo>_dbg_[asan|ub|msan]
assgn1_dbg_asan.o: assgn1.c
	${CL} ${CFLAGS_DBG_ASAN} -c assgn1.c -o assgn1_dbg_asan.o
assgn1_dbg_asan: assgn1_dbg_asan.o common_dbg_asan.o
	${CL} ${CFLAGS_DBG_ASAN} -o assgn1_dbg_asan assgn1_dbg_asan.o common_dbg_asan.o ${LINKIN}

assgn1_dbg_ub.o: assgn1.c
	${CL} ${CFLAGS_DBG_UB} -c assgn1.c -o assgn1_dbg_ub.o
assgn1_dbg_ub: assgn1_dbg_ub.o common_dbg_ub.o
	${CL} ${CFLAGS_DBG_UB} -o assgn1_dbg_ub assgn1_dbg_ub.o common_dbg_ub.o ${LINKIN}

assgn1_dbg_msan.o: assgn1.c
	${CL} ${CFLAGS_DBG_MSAN} -c assgn1.c -o assgn1_dbg_msan.o
assgn1_dbg_msan: assgn1_dbg_msan.o common_dbg_msan.o
	${CL} ${CFLAGS_DBG_MSAN} -o assgn1_dbg_msan assgn1_dbg_msan.o common_dbg_msan.o ${LINKIN}


# indent- "beautifies" C code into the "Linux kernel style".
# (cb = C Beautifier :) )
# Note! original source file(s) is overwritten, so we back it up.
cb: ${CB_FILES}
	mkdir bkp 2> /dev/null; cp -f ${CB_FILES} bkp/
	indent -linux ${CB_FILES}

clean:
	rm -vf ${ALL} core* vgcore* *.o *~
